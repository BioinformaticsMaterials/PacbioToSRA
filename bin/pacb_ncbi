#!/usr/bin/env python

import sys
from os.path import realpath, dirname
APP_ROOT_FULLPATH = dirname(dirname(realpath(__file__)))
sys.path.insert(1, APP_ROOT_FULLPATH)

import concurrent
import click
import errno
import logging
import os

from datetime import datetime
from PacbioToSRA.cell_analysis_result import CellAnalysisResult
from PacbioToSRA.ncbi.excel_sheet_from_template import ExcelSheetFromTemplate
from PacbioToSRA.ncbi.sra_submission import SraSubmission


# TODO: This should eventually go into a config file
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [%(levelname)s] [%(processName)s] [%(threadName)s] %(message)s',
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)


EXCEL_OUTPUT_FILE_FORMAT = 'sra_submission_{}.xlsx'


############################################
# Click functions (for script parameters)
############################################

@click.group()
def cli():
    pass


@cli.command(help='Creates the Excel file that contains the dataset info required by NCBI.')
@click.option('-i', '--input_fofn_file', 'input_fofn_file',
              required=True, type=click.Path(exists=True, readable=True, resolve_path=True),
              help='The input.fofn file. This file contains the dataset directories.')
@click.option('-p', '--bioproject_id', 'bioproject_id',
              required=True, type=click.STRING,
              help='NCBI BioProject ID created on the NCBI website.')
@click.option('-s', '--biosample_id', 'biosample_id',
              required=True, type=click.STRING,
              help='NCBI BioSample ID created on the NCBI website.')
@click.option('-x', '--excel_output_file', 'excel_output_file',
              required=False, type=click.Path(file_okay=True, resolve_path=True),
              help="Name of the output file. Output format is .xslx. Default file name: {}".format(
                      EXCEL_OUTPUT_FILE_FORMAT.format('<date>')
              ))
def create_excel_file(input_fofn_file, bioproject_id, biosample_id, excel_output_file):
    __do_create_excel_file(input_fofn_file, bioproject_id, biosample_id, excel_output_file)


@cli.command(help='Uploads the datasets in the input.fofn file to NCBI.')
@click.option('-i', '--input_fofn_file', 'input_fofn_file',
              required=True, type=click.Path(exists=True, readable=True, resolve_path=True),
              help='The input.fofn file. This file contains the dataset directories.')
@click.option('-u', '--username', 'username',
              required=True, type=click.STRING,
              help='Username to use to upload data sets to NCBI.')
@click.option('-k', '--ssh_key_file', 'ssh_key_file',
              required=True, type=click.Path(exists=True, readable=True, resolve_path=True),
              help='SSH key  to use to upload data sets to NCBI.')
def upload(input_fofn_file, username, ssh_key_file):
    __do_upload(input_fofn_file, username, ssh_key_file)


@cli.command(help='Creates the Excel file that contains the dataset info required by NCBI and uplaods them to NCBI.')
@click.option('-i', '--input_fofn_file', 'input_fofn_file',
              required=True, type=click.Path(exists=True, readable=True, resolve_path=True),
              help='The input.fofn file. This file contains the dataset directories.')
@click.option('-p', '--bioproject_id', 'bioproject_id',
              required=True, type=click.STRING,
              help='NCBI BioProject ID created on the NCBI website.')
@click.option('-s', '--biosample_id', 'biosample_id',
              required=True, type=click.STRING,
              help='NCBI BioSample ID created on the NCBI website.')
@click.option('-x', '--excel_output_file', 'excel_output_file',
              required=False, type=click.Path(file_okay=True, resolve_path=True),
              help='Name of the output file. Output format is .xslx. Default file name: sra_submission_<date>.xlsx')
@click.option('-i', '--input_fofn_file', 'input_fofn_file',
              required=True, type=click.Path(exists=True, readable=True, resolve_path=True),
              help='The input.fofn file. This file contains the dataset directories.')
@click.option('-u', '--username', 'username',
              required=True, type=click.STRING,
              help='Username to use to upload data sets to NCBI.')
@click.option('-k', '--ssh_key_file', 'ssh_key_file',
              required=True, type=click.Path(exists=True, readable=True, resolve_path=True),
              help='SSH key to use to upload data sets to NCBI.')
@click.option('-m', '--enable_multiprocess', 'enable_multiprocess',
              is_flag=True,
              help='Enable multiprocess. Will create excel document and upload files in parallel. ' +
                   'This will speed up the entire process but will require more hardware power')
def create_excel_file_and_upload(input_fofn_file, bioproject_id, biosample_id, excel_output_file,
                                 username, ssh_key_file, enable_multiprocess):

    excel_args = (input_fofn_file, bioproject_id, biosample_id, excel_output_file)
    upload_args = (input_fofn_file, username, ssh_key_file)

    if enable_multiprocess:
        # used multiple processes as workaround for multithread problem with Aspera. "ValueError: signal only works in main thread"
        with concurrent.futures.ProcessPoolExecutor() as executor:
            fs = [
                executor.submit(__do_create_excel_file, *excel_args),
                executor.submit(__do_upload, *upload_args),
            ]

        # don't need to get results from processes
        # for f in concurrent.futures.as_completed(fs):
        #     pass
        #     r = f.result()
    else:
        __do_create_excel_file(*excel_args)
        __do_upload(*upload_args)

    logger.info('Complete!')


###########################################
# Functions to create the excel file
###########################################

def __error_if_ascp_not_available(username, ssh_key_file):
    # return if ascp command does not exist
    if not SraSubmission(username, ssh_key_file).ascp_cmd_exist():
        logger.error("Could not find Aspera's ascp command!")
        sys.exit(errno.ENOENT)      # file/dir does not exist status code


def __do_create_excel_file(input_fofn_file, bioproject_id, biosample_id, excel_output_file):
    if not excel_output_file:
        excel_output_file = __generate_excel_file_name()

    # os.path.exists checks if file and dir already exist
    if os.path.exists(excel_output_file):
        logger.error("File already exist: {}".format(excel_output_file))
        sys.exit(errno.ENOENT)      # file/dir does not exist status code

    cell_analysis_results = __generate_cell_analysis_results_from_fofn(input_fofn_file)

    sr_data_ws_rows = __generate_rows_for_sr_data_worksheet(bioproject_id, biosample_id, cell_analysis_results)
    files_ws_rows = __generate_rows_for_files_worksheet(cell_analysis_results)

    __create_excel_workbook(excel_output_file, files_ws_rows, sr_data_ws_rows)

    logger.info('Excel document created.')


def __generate_cell_analysis_results_from_fofn(input_fofn_file):
    input_fofn_dirs = __extract_dirs_from_fofn(input_fofn_file)
    return __generate_cell_analysis_results(input_fofn_dirs)


def __extract_dirs_from_fofn(input_fofn_file):
    """Extracts all the root directories from the input.fofn file.

    :param  input_fofn_file:    The file that contains the cell analysis result files.
    :type   input_fofn_file:    string
    :return:                    Root directories of the cell analysis results.
    :rtype                      list
    """
    logger.info("Extracting root directory from: {} ....".format(input_fofn_file))
    dirs = set()
    with open(input_fofn_file, 'r') as fp:
        for f in fp:
            # ex: /mnt/data3/vol60/2420308/0001/Analysis_Results/m150325_061829_42142_c100811842550000001823178610081510_s1_p0.1.subreads.fasta
            # want everything before "Analysis_Results"
            d = dirname(dirname(f.strip()))

            if d == '':
                continue

            if not os.path.exists(d):
                logger.error("Reading input_fofn_file. Directory does not exist: {}".format(d))
                sys.exit(errno.ENOENT)      # file/dir does not exist status code

            dirs.add(d)

    if not dirs:
        logger.error('No directories found in input.fofn file.')
        sys.exit(errno.ENODATA)

    return dirs


def __generate_cell_analysis_results(dirs):
    """Get cell analys result information from all the directories

    :param  dirs:   Directories
    :type   dirs:   list
    :return:        Objects that hold information for all the cell result directories
    :rtype          list
    """
    results = []
    for d in dirs:
        logger.info("Retrieving cell analysis result data from: {}".format(d))
        results.append(CellAnalysisResult(d))

    return results


def __generate_rows_for_files_worksheet(cell_analysis_results):
    """Generates all the rows for the worksheet that contains information on all the files.

    :param  cell_analysis_results:  List of all cell analysis result info
    :type   cell_analysis_results:  list
    :return:                        List of rows to insert into an excel worksheet
    :rtype                          list
    """
    logger.info('Creating Excel data for all file information...')

    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        logging.debug("Submitting get info for files job to Thread Pool...")

        futures = {}
        job_total = len(cell_analysis_results)
        i = 0

        for analysis in cell_analysis_results:
            i += 1
            logging.debug("    ({}/{}) Submitting {}".format(i, job_total, analysis.root_dir))
            futures[executor.submit(analysis.get_info_for_files)] = analysis

    total_cell_analysis_results = len(cell_analysis_results)
    analysis_count = 0
    rows = []
    for future in concurrent.futures.as_completed(futures):
        analysis = futures[future]
        files_info = future.result()

        analysis_count += 1
        logger.info("    ({}/{}) Generating specific information for all files ({}) in: {}".format(
            analysis_count, total_cell_analysis_results, len(files_info), analysis.root_dir
        ))

        sample_name = analysis.get_value_from_xml_path('Sample/Name')
        sample_plateid = analysis.get_value_from_xml_path('Sample/PlateId')

        for f, info in files_info.iteritems():
            rows.append([sample_name, sample_plateid, info['filename'], info['md5sum']])

    return rows


def __generate_rows_for_sr_data_worksheet(bioproject_id, biosample_id, cell_analysis_results):
    """Generates all the rows for the worksheet that contains sr data.


    :param  bioproject_id:          BioProject ID
    :rtype  bioporject_id:          string
    :param  biosample_id:           BioSample ID
    :rtype  biosample_id:           string
    :param  cell_analysis_results:  All cell analysis result info
    :type   cell_analysis_results:  list
    :return:                        Rows to insert into an excel worksheet
    :rtype                          list
    """
    logger.info('Creating Excel data for cell analysis...')
    rows = []
    unique_sample_names = set()
    for r in cell_analysis_results:
        sample_name = r.get_value_from_xml_path('Sample/Name')
        design_desc = r.get_value_from_xml_path('Primary/ConfigFileName').rstrip('.xml')
        if sample_name not in unique_sample_names:
            rows.append([
                bioproject_id,                  # bioproject_accession
                biosample_id,                   # biosample_accession
                sample_name,                    # sample_name
                sample_name,                    # library_ID
                None,                           # title/short description
                None,                           # library_strategy (click for details)
                None,                           # library_source (click for details)
                None,                           # library_selection (click for details)
                None,                           # library_layout
                r.get_platform(),               # platform (click for details)
                r.get_instrument_model(),       # instrument_model
                design_desc,                    # design_description
                None,                           # reference_genome_assembly (or accession)
                None,                           # alignment_software
                None,                           # forward_read_length
                None,                           # reverse_read_length
                r.get_file_type(),              # filetype
                None,                           # filename
                None,                           # MD5_checksum
                None,                           # filetype
                None,                           # filename
                None,                           # MD5_checksum
            ])

        unique_sample_names.add(sample_name)

    return rows


def __create_excel_workbook(output_filename, files_ws_rows, sr_data_ws_rows):
    """Creates the Excel workbook

    :param  output_filename:    Output file name
    :type   output_filename:    string
    :param  files_ws_rows:      Rows of file data
    :type   files_ws_rows:      list
    :param  sr_data_ws_rows:    Rows of SR Data
    :type   sr_data_ws_rows:    list
    """
    logger.info("Creating {}...".format(output_filename))
    wb = ExcelSheetFromTemplate(output_filename)
    logger.info('    Writing to files worksheet...')
    wb.write_to_files_worksheet(files_ws_rows)
    logger.info('    Writing to sra data worksheet...')
    wb.write_to_sr_data_worksheet(sr_data_ws_rows)


def __generate_excel_file_name():
    """ Create an Excel workbook output file name with the current date.

    :return:    Name of Excel file
    :rtype      string
    """
    return EXCEL_OUTPUT_FILE_FORMAT.format(datetime.now().strftime("%Y%m%d%H%M"))


###########################################
# Functions to upload to NCBI
###########################################

def __do_upload(input_fofn_file, username, ssh_key_file):
    cell_analysis_results = __generate_cell_analysis_results_from_fofn(input_fofn_file)

    # Get all files to upload
    files_only = []
    for result in cell_analysis_results:
        files_only.extend(result.get_files())

    logger.info("Submitting files to NCBI...")

    sra = SraSubmission(username, ssh_key_file)
    sra.submit_files(files_only)

    logger.info('Upload complete.')


if __name__ == '__main__':
    cli()

